name: chocolatine
run-name: ${{ github.actor }} Intro to DevOps - Chocolatine

on:
  push:
    branches-ignore:
      - "ga-ignore-*"
  pull_request:
    branches-ignore:
      - "ga-ignore-*"

env:
  MIRROR_URL: git@github.com:EpitechPromo2028/B-DOP-200-PAR-2-1-chocolatine-theo.couto-christofidis.git
  EXECUTABLES: "chocolatine"

jobs:
  check_coding_style:
    name: Checking the coding style
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ''

      - name: Run coding-style checker
        run: check.sh . /tmp

      - name: Display coding-style error
        run: |
          input=/tmp/coding-style-reports.log
          while IFS= read -r -a line; do
            fields=($(printf "%s" "$line"|cut -d':' --output-delimiter=' ' -f1-))
            echo "::error title=${fields[2]} coding style error,file=${fields[0]},line=${fields[1]}::${fields[3]}"
          done < $input

  check_program_compilation:
    name: Checking that the program compiles correctly
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    needs: [check_coding_style]
    timeout-minutes: 2
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ''

      - name: Compile program
        run: make

      - name: Clean up
        run: make clean

      - name: Verify executables
        run: |
          for executable in ${{ env.EXECUTABLES }}; do
             if [ ! -x "$executable" ]; then
              echo "Executable $executable is missing or not executable"
              exit 1
            fi
          done

  run_tests:
    name: Running tests
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    needs: [check_program_compilation]
    timeout-minutes: 2
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ''

      - name: Compile tests
        run: make tests_run

  push_to_mirror:
    name: Pushing to the mirror repository
    runs-on: ubuntu-latest
    needs:  [run_tests]
    if: github.event_name == 'push'
    steps:
      - if: ${{ github.repository == env.MIRROR_URL }}
        run: |
          exit 1
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push to mirror repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
